// app/api/send-mail/route.ts
import { NextRequest, NextResponse } from "next/server";
import nodemailer from "nodemailer";

// B·∫Øt bu·ªôc d√πng Node runtime ƒë·ªÉ x√†i Nodemailer tr√™n Vercel
export const runtime = "nodejs";
export const dynamic = "force-dynamic";

function ensureEnv(...keys) {
    for (const k of keys) {
        if (!process.env[k]) throw new Error(`Missing env: ${k}`);
    }
}

function guessContentType(fileName) {
    const ext = fileName.split(".").pop()?.toLowerCase();
    switch (ext) {
        case "pdf":
            return "application/pdf";
        case "docx":
            return "application/vnd.openxmlformats-officedocument.wordprocessingml.document";
        case "doc":
            return "application/msword";
        case "csv":
            return "text/csv";
        default:
            return "application/octet-stream";
    }
}

async function fetchPublicFileAsBuffer(origin, fileName) {
    // Encode ri√™ng t√™n file (c√≥ d·∫•u + kho·∫£ng tr·∫Øng) ƒë·ªÉ tr√°nh 404
    const encoded = encodeURIComponent(fileName);
    const url = `${origin}/${encoded}`;
    const res = await fetch(url);
    if (!res.ok) throw new Error(`Fetch failed ${res.status} for ${url}`);
    const ab = await res.arrayBuffer();
    return Buffer.from(ab);
}

export async function POST(req) {
    try {
        // Simple auth b·∫±ng token
        const auth = req.headers.get("authorization") || "";
        const token = auth.replace(/^Bearer\s+/i, "");
        if (token !== process.env.CRON_SECRET) {
            return NextResponse.json({ ok: false, error: "Unauthorized" }, { status: 401 });
        }

        // ƒê·ªçc payload (t√πy ch·ªçn)
        const payload = await req.json().catch(() => ({}));
        const {
            to = process.env.MAIL_TO, // fallback ng∆∞·ªùi nh·∫≠n m·∫∑c ƒë·ªãnh
            subject = "ƒê·ª©c Huy - Form ƒê∆°n Xin Ngh·ªâ Vi·ªác",
            text: textOverride,       // n·∫øu body c√≥ 'text' th√¨ override
        } = payload || {};

        ensureEnv("SMTP_HOST", "SMTP_PORT", "SMTP_USER", "SMTP_PASS", "MAIL_FROM");

        // T·∫°o transporter SMTP
        const transporter = nodemailer.createTransport({
            host: process.env.SMTP_HOST,
            port: Number(process.env.SMTP_PORT),
            secure: Number(process.env.SMTP_PORT) === 465, // 465 = SSL
            auth: {
                user: process.env.SMPP_USER || process.env.SMTP_USER, // l·ª° tay g√µ nh·∫ßm key c≈©ng kh√¥ng sao :)
                pass: process.env.SMTP_PASS,
            },
        });

        // X√°c ƒë·ªãnh origin hi·ªán t·∫°i (vd: https://count-down-pi-peach.vercel.app)
        const origin = req.nextUrl.origin;
        // Trang ch·ªß ƒë·∫øm ng∆∞·ª£c (th√™m d·∫•u '/')
        const homepageUrl = `${origin}/`;

        // N·ªôi dung text m·∫∑c ƒë·ªãnh (c√≥ ch√®n link plain text)
        const fallbackText =
            "C√≤n ch·∫ßn ch·ªù g√¨ n·ªØa m√† kh√¥ng ƒëi·ªÅn v√†o form n√†y ƒëi th√¥i!\n" +
            `Trang ƒë·∫øm ng∆∞·ª£c: ${homepageUrl}`;

        // N·ªôi dung HTML ƒë·∫πp (c√≥ anchor)
        const html = `
      <div style="font-family:system-ui,Segoe UI,Roboto,Arial,sans-serif;line-height:1.6;color:#222">
        <h2 style="margin:0 0 8px">ƒê·ª©c Huy - Form ƒê∆°n Xin Ngh·ªâ Vi·ªác</h2>
        <p style="margin:0 0 12px">C√≤n ch·∫ßn ch·ªù g√¨ n·ªØa m√† kh√¥ng ƒëi·ªÅn v√†o form n√†y ƒëi th√¥i!</p>
        <p style="margin:0 0 12px">
          üëâ Xem trang ƒë·∫øm ng∆∞·ª£c t·∫°i:
          <a href="${homepageUrl}" target="_blank" style="color:#2563eb;text-decoration:none">
            ${homepageUrl}
          </a>
        </p>
        <hr style="border:none;border-top:1px solid #e5e7eb;margin:16px 0"/>
        <p style="font-size:12px;color:#6b7280;margin:0">Email t·ª± ƒë·ªông t·ª´ h·ªá th·ªëng countdown.</p>
      </div>
    `;

        // T√™n file ƒë√∫ng nh∆∞ trong /public (c√≥ d·∫•u & kho·∫£ng tr·∫Øng)
        const files = ["1. ƒê∆°n xin ngh·ªâ vi·ªác.pdf", "1. ƒê∆°n xin ngh·ªâ vi·ªác.docx"];

        // T·∫£i file public -> Buffer
        const attachments = await Promise.all(
            files.map(async (name) => {
                const content = await fetchPublicFileAsBuffer(origin, name);
                return {
                    filename: name, // Gi·ªØ nguy√™n t√™n (Unicode ok)
                    content,
                    contentType: guessContentType(name),
                };
            })
        );

        // G·ª≠i mail
        const info = await transporter.sendMail({
            from: process.env.MAIL_FROM,
            to,
            subject,
            text: textOverride || fallbackText, // text thu·∫ßn (ph√≤ng khi client kh√¥ng render HTML)
            html,                               // n·ªôi dung HTML c√≥ link
            attachments,
        });

        return NextResponse.json({ ok: true, messageId: info.messageId });
    } catch (err) {
        console.error(err);
        return NextResponse.json({ ok: false, error: err?.message ?? "Unknown error" }, { status: 500 });
    }
}
